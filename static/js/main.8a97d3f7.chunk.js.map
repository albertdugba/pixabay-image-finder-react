{"version":3,"sources":["components/Image.js","components/SearchForm.js","components/ImageResult.js","App.js","components/Router.js","serviceWorker.js","index.js"],"names":["Image","state","loading","image","apiURL","apiKey","_this2","this","_this$state","setState","axios","get","concat","props","match","params","id","then","res","data","hits","catch","error","_this$state2","react_default","a","createElement","className","react_router_dom","to","index_esm","map","img","key","src","largeImageURL","alt","tags","user","likes","toString","replace","views","downloads","href","userImageURL","Component","SearchForm","inputKey","onChangeHandler","event","_this","Object","defineProperty","target","name","value","onSubmitHandler","preventDefault","addSearchQuery","onSubmit","type","onChange","placeholder","ImageResult","App","images","onSearchQuery","input","console","log","components_SearchForm","components_ImageResult","Router","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a97d3f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport {\n  FaEye,\n  FaHeart,\n  FaDownload,\n  FaArrowRight,\n  FaTags\n} from \"react-icons/fa\";\n\nclass Image extends Component {\n  state = {\n    loading: false,\n    image: [],\n    apiURL: \"https://pixabay.com/api/?key=\",\n    apiKey: \"12767634-de61c4a8d872248a18dce66ea\"\n  };\n\n  componentDidMount() {\n    const { apiURL, apiKey } = this.state;\n    this.setState({ loading: true });\n    // Make a request to the pixabay api\n    axios\n      .get(`${apiURL}${apiKey}&id=${this.props.match.params.id}`)\n      .then(res => this.setState({ image: res.data.hits, loading: false }))\n      .catch(error => this.setState({ loading: false, error }));\n  }\n\n  render() {\n    const { image, loading } = this.state;\n\n    return (\n      <div>\n        <div className=\"back\">\n          <Link to=\"/\">\n            <p>\n              <FaArrowLeft /> Back Home\n            </p>\n          </Link>\n        </div>\n        <div className=\"single-image\">\n          {loading ? (\n            <p>Loading ...</p>\n          ) : (\n            // Map through the returned data\n            image.map(img => (\n              <div key={img.id} className=\"img-layout\">\n                <img src={img.largeImageURL} alt={img.tags} className=\"img\" />\n\n                <div className=\"list-group second-column\">\n                  <h1 className=\"l-heading\">\n                    <strong>{img.user} </strong>Image Details\n                  </h1>\n\n                  {/* Heart Icon */}\n                  <p className=\"list-group-item\">\n                    <FaHeart className=\"like\" />\n                    <span>\n                      {img.likes\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}{\" \"}\n                      likes\n                    </span>\n                  </p>\n\n                  {/* Views Icon */}\n                  <p className=\"list-group-item\">\n                    <FaEye className=\"eye\" />\n                    <span>\n                      {img.views\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}{\" \"}\n                      views\n                    </span>\n                  </p>\n\n                  {/* Tags Icons */}\n                  <p className=\"list-group-item \">\n                    <FaTags className=\"tags\" />\n                    <span>{img.tags}</span>\n                  </p>\n\n                  {/* Download Icons */}\n                  <p className=\"list-group-item\">\n                    <FaDownload className=\"download\" />\n                    <span>\n                      {\" \"}\n                      {img.downloads\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}{\" \"}\n                      downloads\n                    </span>\n                  </p>\n                  <button className=\"list-group-item btn\">\n                    {\" \"}\n                    <a href={img.userImageURL} className=\"arrow\">\n                      Go to Profile <FaArrowRight className=\"arrow-right\" />\n                    </a>\n                  </button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass SearchForm extends Component {\n  state = {\n    inputKey: \"\"\n  };\n\n  onChangeHandler = event =>\n    this.setState({ [event.target.name]: event.target.value });\n\n  onSubmitHandler = event => {\n    event.preventDefault();\n    this.props.addSearchQuery(this.state.inputKey);\n    this.setState({ inputKey: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmitHandler}>\n        <input\n          type=\"text\"\n          name=\"inputKey\"\n          value={this.state.inputKey}\n          onChange={this.onChangeHandler}\n          placeholder=\"Search for awesome images\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\n\nclass ImageResult extends Component {\n  render() {\n    const { data } = this.props;\n    return (\n      <div className=\"ImageGrid\">\n        {data.map(image => {\n          return (\n            <div key={image.id}>\n              <div>\n                <img src={image.largeImageURL} alt=\"Pixabay\" />\n                <p>\n                  By <strong className=\"text\">{image.user}</strong>\n                </p>\n                <button className=\"btn\">\n                  <Link to={`/image/${image.id}`}>View Image</Link>\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default ImageResult;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport SearchForm from \"./components/SearchForm\";\nimport ImageResult from \"./components/ImageResult\";\n\nclass App extends Component {\n  state = {\n    apiURL: \"https://pixabay.com/api/?\",\n    apiKey: \"12767634-de61c4a8d872248a18dce66ea\",\n    loading: false,\n    images: []\n  };\n\n  onSearchQuery = input => {\n    this.setState({ loading: true });\n    axios\n      .get(\n        `${this.state.apiURL}key=${this.state.apiKey}&q=${input}&image_type=photo`\n      )\n      .then(data => this.setState({ images: data.data.hits, loading: false }))\n      .catch(error => this.setState({ loading: false, error }));\n  };\n\n  // Pesist to Local Storage\n\n  // componentDidUpdate = () => {\n  //   const images = JSON.stringify(this.state.images);\n  //   localStorage.setItem(\"Images\", images);\n  // };\n\n  // componentDidMount = () => {\n  //   const jsonImages = localStorage.getItem(\"Images\");\n  //   const images = JSON.parse(jsonImages);\n  //   this.setState({ images });\n  // };\n\n  render() {\n    console.log(this.state.images);\n    return (\n      <div>\n        <SearchForm addSearchQuery={this.onSearchQuery} />\n\n        {this.state.loading ? (\n          <p className=\"loading\">Loading...</p>\n        ) : (\n          <div className=\"page-container\">\n            {\" \"}\n            <ImageResult data={this.state.images} className=\"ImageTop\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Image from \"./Image\";\nimport App from \"../App\";\n\nclass Router extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n          <Route exact path=\"/image/:id\" component={Image} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./components/Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}